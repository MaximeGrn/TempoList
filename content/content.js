// Script de contenu pour l'automatisation TempoList

// V√©rifier que l'extension est toujours valide
function checkExtensionValidity() {
    try {
        return chrome && chrome.runtime && chrome.runtime.id;
    } catch (error) {
        console.log('[TempoList] Extension context invalidated, script will not run');
        return false;
    }
}

// Si l'extension n'est pas valide, arr√™ter l'ex√©cution
if (!checkExtensionValidity()) {
    console.log('[TempoList] Extension context invalidated, stopping content script');
    // Ne pas continuer l'ex√©cution du script
} else {
    console.log('[TempoList] Extension context valid, content script starting');
}

let isAutomationRunning = false;
let automationInterval = null;
let currentTargetElement = null;
let debugPanel = null;
let actionCount = 0;
let currentRowIndex = -1; // Pour suivre la ligne actuelle dans AG-Grid

// Configuration de l'automatisation (valeurs par d√©faut)
let AUTOMATION_CONFIG = {
    initialKey: 'r', // Lettre √† taper pour commencer
    downArrowCount: 2, // Nombre de fl√®ches vers le bas
    delayBetweenActions: 200, // D√©lai entre chaque action (ms)
    delayBetweenCycles: 800 // D√©lai entre chaque cycle complet (ms) - r√©duit car s√©lection directe
};

// Charger la configuration depuis le stockage
async function loadConfig() {
    try {
        const result = await chrome.storage.sync.get('automationConfig');
        if (result.automationConfig) {
            AUTOMATION_CONFIG = { ...AUTOMATION_CONFIG, ...result.automationConfig };
            logAction(`Configuration charg√©e: ${JSON.stringify(AUTOMATION_CONFIG)}`);
        }
    } catch (error) {
        logAction(`Erreur lors du chargement de la configuration: ${error.message}`, 'error');
    }
}

// Charger la configuration au d√©marrage du script
loadConfig();

// √âcouter les messages du background script
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.action === 'startAutomation') {
        startAutomation(request.element, request.mode || 'commune');
        sendResponse({ success: true });
    } else if (request.action === 'startPatternFill') {
        startPatternFill(request.element);
        sendResponse({ success: true });
    } else if (request.action === 'stopAutomation') {
        stopAutomation();
        sendResponse({ success: true });
    }
});

// Fonction pour g√©rer la touche √âchap
function handleEscapeKey(event) {
    if (event.key === 'Escape' && (isAutomationRunning || debugPanel)) {
        if (isAutomationRunning) {
            stopAutomation();
            showNotification('Automatisation arr√™t√©e');
        } else if (debugPanel) {
            removeDebugPanel();
        }
    }
}

// √âcouter les √©v√©nements clavier pour arr√™ter avec √âchap
document.addEventListener('keydown', handleEscapeKey);

// Fonction pour d√©marrer l'automatisation
function startAutomation(elementInfo, mode = 'commune') {
    logAction(`üöÄ D√©but de l'automatisation (mode: ${mode})`);
    
    if (isAutomationRunning) {
        logAction('‚ö†Ô∏è Arr√™t de l\'automatisation pr√©c√©dente');
        stopAutomation();
    }

    // Cr√©er le panneau de d√©bogage
    createDebugPanel();
    
    // Trouver l'√©l√©ment cible
    logAction('üîç Recherche de l\'√©l√©ment cible...');
    currentTargetElement = findTargetElement(elementInfo);
    
    if (!currentTargetElement) {
        logImportant('‚ùå Impossible de trouver l\'√©l√©ment √† automatiser', 'error');
        showNotification('Impossible de trouver l\'√©l√©ment √† automatiser', 'error');
        return;
    }

    // Identifier la ligne de d√©part
    currentRowIndex = getRowIndex(currentTargetElement);
    if (currentRowIndex !== -1) {
        logImportant(`üéØ D√©marrage ligne ${currentRowIndex} (${mode})`, 'success');
    } else {
        logImportant('‚ö†Ô∏è Impossible de d√©terminer la ligne de d√©part', 'error');
    }
    
    isAutomationRunning = true;
    actionCount = 0;
    showNotification('Automatisation d√©marr√©e - Appuyez sur √âchap pour arr√™ter', 'success');
    
    // D√©marrer le cycle d'automatisation
    logAction('üîÑ D√©but des cycles d\'automatisation');
    runAutomationCycle();
}

// Fonction pour arr√™ter l'automatisation
function stopAutomation(isAutoStop = false) {
    if (isAutoStop) {
        logImportant(`‚úÖ Automatisation termin√©e - ${actionCount} lignes trait√©es`, 'success');
        // Fermer automatiquement apr√®s 2 secondes
        setTimeout(() => {
            removeDebugPanel();
        }, 2000);
    } else {
        logAction('üõë Arr√™t de l\'automatisation');
        // Fermer apr√®s 5 secondes pour un arr√™t manuel
        setTimeout(() => {
            removeDebugPanel();
        }, 5000);
    }
    
    if (automationInterval) {
        clearInterval(automationInterval);
        automationInterval = null;
    }
    isAutomationRunning = false;
    currentTargetElement = null;
}

// Cr√©er le panneau de d√©bogage
function createDebugPanel() {
    // Supprimer l'ancien panneau s'il existe
    removeDebugPanel();
    
    debugPanel = document.createElement('div');
    debugPanel.id = 'tempolist-debug-panel';
    debugPanel.style.cssText = `
        position: fixed;
        top: 10px;
        left: 10px;
        width: 350px;
        max-height: 400px;
        background: rgba(0, 0, 0, 0.9);
        color: white;
        font-family: 'Courier New', monospace;
        font-size: 12px;
        padding: 15px;
        border-radius: 8px;
        z-index: 999999;
        box-shadow: 0 4px 12px rgba(0,0,0,0.5);
        overflow-y: auto;
        border: 2px solid #3498db;
    `;
    
    debugPanel.innerHTML = `
        <div style="border-bottom: 1px solid #555; padding-bottom: 10px; margin-bottom: 10px; display: flex; justify-content: space-between; align-items: center;">
            <strong>üîß TempoList Debug</strong>
            <button id="close-debug" style="background: #e74c3c; color: white; border: none; padding: 2px 8px; border-radius: 4px; cursor: pointer;">‚úï</button>
        </div>
        <div id="debug-log" style="max-height: 300px; overflow-y: auto;"></div>
    `;
    
    document.body.appendChild(debugPanel);
    
    // Bouton de fermeture
    document.getElementById('close-debug').addEventListener('click', () => {
        stopAutomation();
        removeDebugPanel();
    });
    
    logAction('üîß Panneau de d√©bogage cr√©√©');
}

// Supprimer le panneau de d√©bogage
function removeDebugPanel() {
    if (debugPanel && debugPanel.parentNode) {
        debugPanel.remove();
        debugPanel = null;
    }
}

// Fonction pour logger les actions (version simplifi√©e)
function logAction(message, type = 'info', isImportant = false) {
    console.log(`[TempoList] ${message}`);
    
    // Afficher seulement les messages importants dans le panneau
    if (debugPanel && isImportant) {
        const debugLog = document.getElementById('debug-log');
        if (debugLog) {
            const color = type === 'error' ? '#e74c3c' : type === 'success' ? '#27ae60' : '#3498db';
            
            const logEntry = document.createElement('div');
            logEntry.style.cssText = `
                margin-bottom: 8px;
                padding: 8px;
                color: ${color};
                background: rgba(255,255,255,0.1);
                border-radius: 4px;
                font-weight: bold;
            `;
            logEntry.innerHTML = message;
            
            debugLog.appendChild(logEntry);
            debugLog.scrollTop = debugLog.scrollHeight;
        }
    }
}

// Version simplifi√©e pour les logs importants
function logImportant(message, type = 'info') {
    logAction(message, type, true);
}

// Cycle principal d'automatisation
function runAutomationCycle() {
    if (!isAutomationRunning || !currentTargetElement) {
        logAction('‚ùå Cycle interrompu - automatisation arr√™t√©e ou √©l√©ment manquant', 'error');
        return;
    }

    actionCount++;
    logAction(`üîÑ Cycle #${actionCount} - V√©rification de l'√©l√©ment`);

    // V√©rifier si l'√©l√©ment est toujours valide
    if (!document.contains(currentTargetElement)) {
        logAction('‚ö†Ô∏è √âl√©ment cible perdu, recherche d\'un √©l√©ment similaire...');
        // Essayer de retrouver un √©l√©ment similaire
        currentTargetElement = findSimilarElement();
        if (!currentTargetElement) {
            logAction('‚ùå Aucun √©l√©ment similaire trouv√©', 'error');
            stopAutomation();
            showNotification('√âl√©ment cible perdu - Automatisation arr√™t√©e', 'error');
            return;
        }
        logAction('‚úÖ Nouvel √©l√©ment trouv√©');
    }

    // Ex√©cuter la s√©quence d'actions
    logAction(`‚ñ∂Ô∏è Ex√©cution de la s√©quence d'actions pour le cycle #${actionCount}`);
    executeActionSequence()
        .then(() => {
            logAction(`‚úÖ Cycle #${actionCount} termin√© avec succ√®s`, 'success');
            // Programmer le prochain cycle
            logAction(`‚è≥ Attente de ${AUTOMATION_CONFIG.delayBetweenCycles}ms avant le prochain cycle`);
            setTimeout(() => {
                if (isAutomationRunning) {
                    runAutomationCycle();
                }
            }, AUTOMATION_CONFIG.delayBetweenCycles);
        })
        .catch(error => {
            logAction(`‚ùå Erreur dans le cycle #${actionCount}: ${error.message}`, 'error');
            console.error('Erreur lors de l\'automatisation:', error);
            stopAutomation();
            showNotification('Erreur dans l\'automatisation', 'error');
        });
}

// Ex√©cuter la s√©quence d'actions
async function executeActionSequence() {
    try {
        // 1. Cliquer sur l'√©l√©ment pour le focaliser
        logAction('  üëÜ Clic sur l\'√©l√©ment');
        await clickElement(currentTargetElement);
        await delay(AUTOMATION_CONFIG.delayBetweenActions);

        // 2. D√©tecter le type de select et adapter la strat√©gie
        const options = currentTargetElement.querySelectorAll('option');
        let communeOption = null;
        
        // Chercher l'option "Commune"
        for (let option of options) {
            if (option.textContent.trim().toLowerCase() === 'commune') {
                communeOption = option;
                break;
            }
        }
        
        if (communeOption) {
            // Strat√©gie directe : s√©lectionner "Commune" directement
            logAction(`  üéØ S√©lection directe de "Commune" (position ${communeOption.index}/${options.length})`);
            currentTargetElement.value = communeOption.value;
            currentTargetElement.selectedIndex = communeOption.index;
            
            // D√©clencher les √©v√©nements
            const inputEvent = new Event('input', { bubbles: true, cancelable: true });
            const changeEvent = new Event('change', { bubbles: true, cancelable: true });
            currentTargetElement.dispatchEvent(inputEvent);
            currentTargetElement.dispatchEvent(changeEvent);
            
            logAction('  üì¢ √âv√©nements d√©clench√©s pour la s√©lection directe');
            
            // Attendre un peu que les √©v√©nements soient trait√©s
            await delay(AUTOMATION_CONFIG.delayBetweenActions);
            
            // Marquer la ligne actuelle comme trait√©e
            logImportant(`üîÑ Ligne ${currentRowIndex + actionCount - 1} : Commune s√©lectionn√©e`);
            
            // Trouver la ligne suivante
            logAction('  üîç Recherche de la ligne suivante...');
            const nextElement = findNextRowElement();
            if (nextElement) {
                logAction(`  ‚úÖ Ligne suivante trouv√©e (row-index: ${getRowIndex(nextElement)})`, 'success');
                currentTargetElement = nextElement;
            } else {
                logAction('  ‚ö†Ô∏è Aucune ligne suivante trouv√©e - tentative de d√©filement...', 'error');
                
                // Essayer de faire d√©filer pour voir plus de lignes
                const gridViewport = document.querySelector('.ag-body-viewport');
                if (gridViewport) {
                    logAction('  üìú D√©filement de la grille pour charger plus de lignes');
                    gridViewport.scrollTop = gridViewport.scrollTop + 300; // Descendre de 300px
                    
                    // Attendre que le d√©filement charge de nouvelles lignes
                    await delay(1000);
                    
                    // R√©essayer de trouver une ligne suivante
                    const nextElementAfterScroll = findNextRowElement();
                    if (nextElementAfterScroll) {
                        logAction(`  ‚úÖ Nouvelle ligne trouv√©e apr√®s d√©filement`, 'success');
                        currentTargetElement = nextElementAfterScroll;
                    } else {
                        // V√©rifier si on s'est arr√™t√© √† cause d'une mati√®re d√©j√† s√©lectionn√©e
                        logImportant(`üîÑ Ligne ${currentRowIndex + actionCount - 1} : Commune s√©lectionn√©e`);
                        stopAutomation(true); // Auto-stop avec fermeture automatique
                        return;
                    }
                } else {
                    logImportant(`üîÑ Ligne ${currentRowIndex + actionCount - 1} : Commune s√©lectionn√©e`);
                    stopAutomation(true); // Auto-stop avec fermeture automatique
                    return;
                }
            }
        } else {
            // Strat√©gie de fallback : m√©thode clavier classique
            logAction('  ‚ö†Ô∏è Option "Commune" non trouv√©e, utilisation de la m√©thode clavier');
            
            // 2. Taper la lettre initiale
            logAction(`  üìù Frappe de la lettre "${AUTOMATION_CONFIG.initialKey.toUpperCase()}"`);
            await sendKeyToElement(currentTargetElement, AUTOMATION_CONFIG.initialKey);
            await delay(AUTOMATION_CONFIG.delayBetweenActions);

            // 3. Appuyer sur fl√®che du bas le nombre de fois sp√©cifi√©
            for (let i = 0; i < AUTOMATION_CONFIG.downArrowCount; i++) {
                logAction(`  ‚¨áÔ∏è Fl√®che bas (${i + 1}/${AUTOMATION_CONFIG.downArrowCount})`);
                await sendKeyToElement(currentTargetElement, 'ArrowDown');
                await delay(AUTOMATION_CONFIG.delayBetweenActions);
            }

            // 4. Appuyer sur Entr√©e pour valider
            logAction('  ‚úÖ Appui sur Entr√©e');
            await sendKeyToElement(currentTargetElement, 'Enter');
            await delay(AUTOMATION_CONFIG.delayBetweenActions);
        }
        
        logAction('  üéØ S√©quence compl√®te ex√©cut√©e');
    } catch (error) {
        logAction(`  ‚ùå Erreur dans la s√©quence: ${error.message}`, 'error');
        throw error;
    }
}

// Trouver l'√©l√©ment cible bas√© sur les informations fournies
function findTargetElement(elementInfo) {
    logAction('üîç D√©but de la recherche d\'√©l√©ment...');
    // Essayer plusieurs m√©thodes pour trouver l'√©l√©ment
    let element = null;

    // M√©thode prioritaire : Recherche par position de grille si disponible
    if (elementInfo.rowIndex && elementInfo.colId) {
        logAction(`  üéØ Recherche par position grille: ligne ${elementInfo.rowIndex}, colonne ${elementInfo.colId}`);
        const gridElement = document.querySelector(`.ag-row[row-index="${elementInfo.rowIndex}"] [col-id="${elementInfo.colId}"] select`);
        if (gridElement) {
            element = gridElement;
            logAction('  ‚úÖ Trouv√© par position dans la grille', 'success');
        }
    }

    // Par ID si disponible et pas encore trouv√©
    if (!element && elementInfo.id) {
        logAction(`  üîç Recherche par ID: "${elementInfo.id}"`);
        element = document.getElementById(elementInfo.id);
        if (element) logAction('  ‚úÖ Trouv√© par ID', 'success');
    }

    // Par classe si disponible
    if (!element && elementInfo.className) {
        logAction(`  üîç Recherche par classe: "${elementInfo.className}"`);
        const elements = document.getElementsByClassName(elementInfo.className);
        element = elements.length > 0 ? elements[0] : null;
        if (element) logAction('  ‚úÖ Trouv√© par classe', 'success');
    }

    // Par tag name et position
    if (!element && elementInfo.tagName) {
        logAction(`  üîç Recherche par tag: "${elementInfo.tagName}"`);
        const elements = document.getElementsByTagName(elementInfo.tagName);
        logAction(`  üìä ${elements.length} √©l√©ments "${elementInfo.tagName}" trouv√©s`);
        
        if (elements.length > 0) {
            // Prendre le premier select/input trouv√©
            for (let el of elements) {
                if (el.type === 'select-one' || el.tagName.toLowerCase() === 'select') {
                    element = el;
                    logAction('  ‚úÖ Select trouv√©', 'success');
                    break;
                }
            }
        }
    }

    // Recherche par position approximative
    if (!element && elementInfo.rect) {
        logAction(`  üîç Recherche par position: (${Math.round(elementInfo.rect.x)}, ${Math.round(elementInfo.rect.y)})`);
        element = document.elementFromPoint(elementInfo.rect.x, elementInfo.rect.y);
        if (element) logAction('  ‚úÖ Trouv√© par position', 'success');
    }

    // Recherche sp√©cialis√©e pour l'application de listes de fournitures
    if (!element) {
        logAction('  üîç Recherche sp√©cialis√©e pour les selects de mati√®res...');
        
        // PRIORIT√â : Si on a des informations pr√©cises sur l'√©l√©ment cliqu√©, essayer de le retrouver
        if (elementInfo.rect && elementInfo.rect.x && elementInfo.rect.y) {
            logAction(`  üéØ Tentative de r√©cup√©ration de l'√©l√©ment exact cliqu√©...`);
            const clickedElement = document.elementFromPoint(elementInfo.rect.x + 10, elementInfo.rect.y + 10);
            if (clickedElement && (clickedElement.tagName.toLowerCase() === 'select' || clickedElement.closest('select'))) {
                element = clickedElement.tagName.toLowerCase() === 'select' ? clickedElement : clickedElement.closest('select');
                logAction('  ‚úÖ √âl√©ment exact r√©cup√©r√© depuis le clic', 'success');
            }
        }
        
        // Si pas trouv√©, chercher sp√©cifiquement les selects avec la classe selectSubject
        if (!element) {
            const subjectSelects = document.querySelectorAll('select.selectSubject');
            logAction(`  üéì ${subjectSelects.length} selects de mati√®res trouv√©s`);
            
            if (subjectSelects.length > 0) {
                // Prendre le premier select de mati√®re visible
                for (let select of subjectSelects) {
                    if (select.offsetWidth > 0 && select.offsetHeight > 0) {
                        element = select;
                        logAction('  ‚ö†Ô∏è Premier select de mati√®re utilis√© (fallback)', 'error');
                        break;
                    }
                }
            }
        }
    }

    // Recherche g√©n√©rale de tous les selects comme fallback
    if (!element) {
        logAction('  üîç Recherche g√©n√©rale de tous les selects...');
        const allSelects = document.querySelectorAll('select');
        logAction(`  üìä ${allSelects.length} selects trouv√©s sur la page`);
        
        if (allSelects.length > 0) {
            // Prendre le premier select visible qui contient "Commune" dans ses options
            for (let select of allSelects) {
                if (select.offsetWidth > 0 && select.offsetHeight > 0) {
                    // V√©rifier si ce select contient une option "Commune"
                    const hasCommune = Array.from(select.options).some(option => 
                        option.textContent.trim().toLowerCase() === 'commune'
                    );
                    
                    if (hasCommune) {
                        element = select;
                        logAction('  ‚úÖ Select avec option "Commune" trouv√©', 'success');
                        break;
                    }
                }
            }
            
            // Si aucun select avec "Commune" n'est trouv√©, prendre le premier visible
            if (!element) {
                for (let select of allSelects) {
                    if (select.offsetWidth > 0 && select.offsetHeight > 0) {
                        element = select;
                        logAction('  ‚úÖ Premier select visible utilis√©', 'success');
                        break;
                    }
                }
            }
        }
    }

    if (element) {
        logAction(`‚úÖ √âl√©ment final trouv√©: ${element.tagName} (ID: ${element.id || 'N/A'})`, 'success');
    } else {
        logAction('‚ùå Aucun √©l√©ment trouv√©', 'error');
    }

    return element;
}

// Trouver un √©l√©ment similaire si l'original est perdu
function findSimilarElement() {
    // Chercher tous les selects visibles
    const selects = Array.from(document.querySelectorAll('select')).filter(el => {
        return el.offsetWidth > 0 && el.offsetHeight > 0;
    });

    // Retourner le premier select trouv√© (logique simple)
    return selects.length > 0 ? selects[0] : null;
}

// Cliquer sur un √©l√©ment
async function clickElement(element) {
    return new Promise((resolve) => {
        try {
            logAction(`    üëÜ Focus sur l'√©l√©ment`);
            element.focus();
            
            logAction(`    üñ±Ô∏è Clic natif`);
            element.click();
            
            // D√©clencher les √©v√©nements
            logAction(`    üé≠ D√©clenchement des √©v√©nements MouseEvent`);
            const events = ['mousedown', 'click', 'mouseup'];
            events.forEach(eventType => {
                const event = new MouseEvent(eventType, {
                    bubbles: true,
                    cancelable: true,
                    view: window
                });
                element.dispatchEvent(event);
            });
            
            logAction(`    ‚úÖ Clic termin√©`);
            resolve();
        } catch (error) {
            logAction(`    ‚ùå Erreur lors du clic: ${error.message}`, 'error');
            resolve(); // Continue m√™me en cas d'erreur
        }
    });
}

// Envoyer une touche √† un √©l√©ment
async function sendKeyToElement(element, key) {
    return new Promise((resolve) => {
        try {
            logAction(`    ‚å®Ô∏è Envoi de la touche "${key}"`);
            element.focus();
            
            // Essayer avec une approche alternative pour les selects
            if (element.tagName.toLowerCase() === 'select') {
                logAction(`    üìã √âl√©ment SELECT d√©tect√©, utilisation d'une approche sp√©cifique`);
                
                // Analyser les options disponibles
                const options = element.querySelectorAll('option');
                logAction(`    üìä ${options.length} options trouv√©es dans le select`);
                
                if (key === 'r' || key === 'R') {
                    // Chercher directement l'option "Commune" d'abord
                    let foundOption = null;
                    
                    // Priorit√© 1: Chercher exactement "Commune"
                    for (let option of options) {
                        if (option.textContent.trim().toLowerCase() === 'commune') {
                            foundOption = option;
                            logAction(`    üéØ Option "Commune" trouv√©e directement √† l'index ${option.index}`);
                            break;
                        }
                    }
                    
                    // Priorit√© 2: Chercher une option contenant "commune"
                    if (!foundOption) {
                        for (let option of options) {
                            if (option.textContent.toLowerCase().includes('commune')) {
                                foundOption = option;
                                logAction(`    üéØ Option contenant "commune" trouv√©e: "${option.textContent}" √† l'index ${option.index}`);
                                break;
                            }
                        }
                    }
                    
                    // Priorit√© 3: M√©thode classique - chercher ce qui commence par R
                    if (!foundOption) {
                        for (let option of options) {
                            if (option.textContent.toLowerCase().startsWith('r')) {
                                foundOption = option;
                                logAction(`    üìù Option commen√ßant par "R" trouv√©e: "${option.textContent}" √† l'index ${option.index}`);
                                break;
                            }
                        }
                    }
                    
                    if (foundOption) {
                        logAction(`    ‚úÖ S√©lection de l'option: "${foundOption.textContent}" (valeur: ${foundOption.value})`);
                        element.value = foundOption.value;
                        element.selectedIndex = foundOption.index;
                        
                        // D√©clencher les √©v√©nements appropri√©s
                        const changeEvent = new Event('change', { bubbles: true, cancelable: true });
                        const inputEvent = new Event('input', { bubbles: true, cancelable: true });
                        element.dispatchEvent(inputEvent);
                        element.dispatchEvent(changeEvent);
                        
                        logAction(`    üì¢ √âv√©nements change et input d√©clench√©s`);
                    } else {
                        logAction(`    ‚ùå Aucune option appropri√©e trouv√©e`, 'error');
                        // Lister toutes les options pour le d√©bogage
                        logAction(`    üìã Options disponibles:`);
                        for (let i = 0; i < Math.min(options.length, 10); i++) {
                            logAction(`      ${i}: "${options[i].textContent.trim()}"`);
                        }
                        if (options.length > 10) {
                            logAction(`      ... et ${options.length - 10} autres options`);
                        }
                    }
                } else if (key === 'ArrowDown') {
                    logAction(`    ‚¨áÔ∏è D√©placement vers l'option suivante`);
                    const currentIndex = element.selectedIndex;
                    if (currentIndex < element.options.length - 1) {
                        element.selectedIndex = currentIndex + 1;
                        const changeEvent = new Event('change', { bubbles: true });
                        element.dispatchEvent(changeEvent);
                        logAction(`    üìç Nouvelle position: ${element.selectedIndex} - "${element.options[element.selectedIndex].textContent}"`);
                    } else {
                        logAction(`    ‚ö†Ô∏è D√©j√† √† la derni√®re option`);
                    }
                } else if (key === 'Enter') {
                    logAction(`    ‚Ü©Ô∏è Validation de la s√©lection actuelle: "${element.options[element.selectedIndex]?.textContent || 'N/A'}"`);
                    const changeEvent = new Event('change', { bubbles: true });
                    element.dispatchEvent(changeEvent);
                    element.blur();
                }
            } else {
                // Pour les autres types d'√©l√©ments, utiliser les √©v√©nements clavier normaux
                logAction(`    ‚å®Ô∏è Envoi d'√©v√©nements clavier normaux`);
                const keyboardEvents = ['keydown', 'keypress', 'keyup'];
                
                keyboardEvents.forEach(eventType => {
                    const event = new KeyboardEvent(eventType, {
                        key: key,
                        code: key,
                        bubbles: true,
                        cancelable: true
                    });
                    element.dispatchEvent(event);
                });
            }
            
            logAction(`    ‚úÖ Touche "${key}" envoy√©e`);
            resolve();
        } catch (error) {
            logAction(`    ‚ùå Erreur lors de l'envoi de la touche "${key}": ${error.message}`, 'error');
            resolve(); // Continue m√™me en cas d'erreur
        }
    });
}

// Obtenir l'index de ligne d'un √©l√©ment select dans AG-Grid
function getRowIndex(selectElement) {
    // Remonter jusqu'√† la div de ligne (ag-row)
    let rowElement = selectElement.closest('.ag-row');
    if (rowElement) {
        const rowIndexAttr = rowElement.getAttribute('row-index');
        if (rowIndexAttr) {
            return parseInt(rowIndexAttr);
        }
    }
    return -1;
}

// Trouver le select de la ligne suivante
function findNextRowElement() {
    // Obtenir l'index de la ligne actuelle
    const currentIndex = getRowIndex(currentTargetElement);
    logAction(`  üìç Ligne actuelle: ${currentIndex}`);
    
    if (currentIndex === -1) {
        logAction('  ‚ùå Impossible de d√©terminer l\'index de ligne actuel', 'error');
        return null;
    }
    
    // Chercher la ligne suivante
    const nextRowIndex = currentIndex + 1;
    logAction(`  üîç Recherche de la ligne ${nextRowIndex}...`);
    
    // M√©thode 1: Chercher directement par row-index
    let nextRow = document.querySelector(`.ag-row[row-index="${nextRowIndex}"]`);
    
    if (!nextRow) {
        logAction(`  ‚ö†Ô∏è Ligne ${nextRowIndex} non trouv√©e directement, recherche alternative...`);
        
        // M√©thode 2: Chercher toutes les lignes visibles et trouver la suivante
        const allRows = Array.from(document.querySelectorAll('.ag-row[row-index]'));
        const sortedRows = allRows.sort((a, b) => {
            const aIndex = parseInt(a.getAttribute('row-index'));
            const bIndex = parseInt(b.getAttribute('row-index'));
            return aIndex - bIndex;
        });
        
        // Trouver la premi√®re ligne avec un index sup√©rieur √† currentIndex
        nextRow = sortedRows.find(row => {
            const rowIndex = parseInt(row.getAttribute('row-index'));
            return rowIndex > currentIndex;
        });
        
        if (nextRow) {
            const foundIndex = parseInt(nextRow.getAttribute('row-index'));
            logAction(`  üîç Ligne suivante trouv√©e avec index ${foundIndex}`);
        }
    }
    
    if (!nextRow) {
        logAction('  ‚ùå Aucune ligne suivante trouv√©e', 'error');
        return null;
    }
    
    // Chercher le select dans la colonne "subject"
    const nextSelect = nextRow.querySelector('[col-id="subject"] select.selectSubject');
    
    if (!nextSelect) {
        logAction('  ‚ùå Select non trouv√© dans la ligne suivante', 'error');
        return null;
    }
    
    // V√©rifier l'√©tat du select de la ligne suivante
    const nextSelectValue = nextSelect.value.trim();
    
    if (nextSelectValue === 'Commune') {
        logAction('  ‚ö†Ô∏è La ligne suivante a d√©j√† "Commune" s√©lectionn√©, passage √† la suivante...');
        // Temporairement changer currentTargetElement pour chercher encore la suivante
        const tempCurrent = currentTargetElement;
        currentTargetElement = nextSelect;
        const nextNext = findNextRowElement();
        currentTargetElement = tempCurrent;
        return nextNext;
    } else if (nextSelectValue && nextSelectValue !== '') {
        // Une mati√®re est d√©j√† s√©lectionn√©e (autre que Commune)
        logAction(`  üõë ARR√äT : Ligne suivante a d√©j√† une mati√®re s√©lectionn√©e ("${nextSelectValue}")`, 'error');
        logAction(`  üéØ Fin du traitement d√©tect√©e - Toutes les lignes "Commune" ont √©t√© trait√©es`, 'success');
        return null; // Cela d√©clenchera l'arr√™t de l'automatisation
    }
    
    logAction(`  ‚úÖ Select trouv√© dans la ligne ${getRowIndex(nextSelect)}`, 'success');
    return nextSelect;
}

// Fonction de d√©lai
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Afficher une notification
function showNotification(message, type = 'info') {
    // Supprimer les notifications existantes
    const existingNotifications = document.querySelectorAll('.tempolist-notification');
    existingNotifications.forEach(notification => notification.remove());

    // Cr√©er la notification
    const notification = document.createElement('div');
    notification.className = 'tempolist-notification';
    notification.textContent = message;
    
    // Styles
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'error' ? '#e74c3c' : type === 'success' ? '#27ae60' : '#3498db'};
        color: white;
        padding: 12px 20px;
        border-radius: 6px;
        font-family: Arial, sans-serif;
        font-size: 14px;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        animation: slideIn 0.3s ease-out;
    `;

    // Ajouter l'animation CSS
    if (!document.querySelector('#tempolist-notification-styles')) {
        const styles = document.createElement('style');
        styles.id = 'tempolist-notification-styles';
        styles.textContent = `
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
        `;
        document.head.appendChild(styles);
    }

    // Ajouter au DOM
    document.body.appendChild(notification);

    // Supprimer apr√®s 3 secondes
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 3000);
}

// Fonction utilitaire pour envoyer des messages de mani√®re s√©curis√©e
function safeSendMessage(message, callback) {
    try {
        // V√©rifier que l'extension est toujours valide
        if (!checkExtensionValidity()) {
            console.log('[TempoList] Extension context invalidated, cannot send message');
            return;
        }
        
        chrome.runtime.sendMessage(message, (response) => {
            if (chrome.runtime.lastError) {
                console.log('[TempoList] Extension context invalidated, ignoring error:', chrome.runtime.lastError.message);
                return;
            }
            if (callback) callback(response);
        });
    } catch (error) {
        console.log('[TempoList] Extension context error:', error.message);
    }
}

// √âcouter les clics droits sur les √©l√©ments
document.addEventListener('contextmenu', (e) => {
    const target = e.target;
    
    // Enregistrer les informations de l'√©l√©ment cliqu√©
    const elementInfo = {
        tagName: target.tagName,
        id: target.id,
        className: target.className,
        type: target.type,
        rect: target.getBoundingClientRect()
    };
    
    // Si c'est dans AG-Grid, ajouter les informations sp√©cifiques
    const agRow = target.closest('.ag-row');
    if (agRow) {
        elementInfo.rowIndex = agRow.getAttribute('row-index');
        
        const agCell = target.closest('.ag-cell');
        if (agCell) {
            elementInfo.colId = agCell.getAttribute('col-id');
        }
    }
    
    logAction(`Clic droit d√©tect√© sur: ${target.tagName}`, 'info', false);
    logAction(`Element info: ${JSON.stringify({
        tagName: elementInfo.tagName,
        id: elementInfo.id,
        className: elementInfo.className,
        rowIndex: elementInfo.rowIndex,
        colId: elementInfo.colId
    })}`);
    
    // Envoyer les informations au background script de mani√®re s√©curis√©e
    safeSendMessage({
        action: 'elementRightClicked',
        elementInfo: elementInfo
    });
});

// Ajouter une v√©rification initiale pour s'assurer que le script fonctionne
console.log('[TempoList] Script de contenu charg√© et pr√™t');
console.log('[TempoList] URL actuelle:', window.location.href);
console.log('[TempoList] Nombre de selects trouv√©s:', document.querySelectorAll('select').length);

// Diagnostic initial
setTimeout(() => {
    const selects = document.querySelectorAll('select.selectSubject');
    console.log('[TempoList] Selects de mati√®res trouv√©s:', selects.length);
    
    if (selects.length > 0) {
        console.log('[TempoList] Premier select trouv√©:', selects[0]);
        const row = selects[0].closest('.ag-row');
        if (row) {
            console.log('[TempoList] Row-index du premier select:', row.getAttribute('row-index'));
        }
    }
    
    // V√©rifier si le clic droit fonctionne
    document.addEventListener('contextmenu', () => {
        console.log('[TempoList] Clic droit d√©tect√© !');
    }, { once: true });
}, 2000);

// Fonction de test pour v√©rifier que tout fonctionne
function testAutomation() {
    logAction('üß™ Test de l\'automatisation manuelle');
    createDebugPanel();
    
    // Chercher le premier select sur la page
    const selects = document.querySelectorAll('select');
    if (selects.length > 0) {
        const firstSelect = selects[0];
        logAction(`‚úÖ Select trouv√© pour le test: ${firstSelect.tagName}`, 'success');
        
        startAutomation({
            tagName: firstSelect.tagName,
            id: firstSelect.id,
            className: firstSelect.className,
            type: firstSelect.type,
            rect: firstSelect.getBoundingClientRect()
        });
    } else {
        logAction('‚ùå Aucun select trouv√© sur la page', 'error');
    }
}

// Exposer les fonctions de test pour la console
window.tempoListTest = testAutomation;
window.tempoListDiagnostic = function() {
    console.log('=== DIAGNOSTIC TEMPOLIST ===');
    console.log('Extension charg√©e:', typeof chrome !== 'undefined' && chrome.runtime);
    console.log('Selects total:', document.querySelectorAll('select').length);
    console.log('Selects mati√®res:', document.querySelectorAll('select.selectSubject').length);
    console.log('Lignes AG-Grid:', document.querySelectorAll('.ag-row').length);
    
    const allSelects = document.querySelectorAll('select.selectSubject');
    console.log('Analyse des selects de mati√®res:');
    
    allSelects.forEach((select, index) => {
        const row = select.closest('.ag-row');
        const rowIndex = row?.getAttribute('row-index');
        const value = select.value.trim();
        const status = value === '' ? 'üü° VIDE' : value === 'Commune' ? 'üü¢ COMMUNE' : `üî¥ ${value}`;
        
        console.log(`  Ligne ${rowIndex}: ${status}`);
        
        if (index >= 10) {
            console.log(`  ... et ${allSelects.length - 10} autres lignes`);
            return false;
        }
    });
    
    const firstSelect = document.querySelector('select.selectSubject');
    if (firstSelect) {
        // Test de s√©lection
        const communeOption = Array.from(firstSelect.options).find(opt => 
            opt.textContent.trim().toLowerCase() === 'commune'
        );
        console.log('Option Commune trouv√©e:', communeOption ? communeOption.textContent : 'NON');
    }
    
    console.log('=== FIN DIAGNOSTIC ===');
};

// Auto-diagnostic au chargement
setTimeout(() => {
    window.tempoListDiagnostic();
}, 3000);

// === REMPLISSAGE AUTOMATIQUE PAR PATTERN ===

// Fonction pour d√©marrer le remplissage automatique par pattern
async function startPatternFill(elementInfo) {
    logAction('üéØ D√©but du remplissage automatique par pattern');
    
    if (isAutomationRunning) {
        logAction('‚ö†Ô∏è Arr√™t de l\'automatisation pr√©c√©dente');
        stopAutomation();
    }

    // Cr√©er le panneau de d√©bogage
    createDebugPanel();
    
    try {
        // Charger la configuration
        await loadConfig();
        
        // Trouver tous les selects de mati√®res dans l'ordre
        const allSelects = await findAllSubjectSelects();
        
        if (allSelects.length === 0) {
            logImportant('‚ùå Aucun √©l√©ment √† remplir trouv√©', 'error');
            showNotification('Aucun √©l√©ment √† remplir trouv√©', 'error');
            return;
        }

        logImportant(`üéØ D√©marrage remplissage automatique (${allSelects.length} lignes)`, 'success');
        
        isAutomationRunning = true;
        actionCount = 0;
        showNotification('Remplissage automatique d√©marr√© - Appuyez sur √âchap pour arr√™ter', 'success');
        
        // D√©marrer le remplissage
        await executePatternFill(allSelects);
        
    } catch (error) {
        logImportant(`‚ùå Erreur lors du remplissage: ${error.message}`, 'error');
        console.error('Erreur lors du remplissage automatique:', error);
        stopAutomation();
        showNotification('Erreur lors du remplissage automatique', 'error');
    }
}

// Fonction pour trouver tous les selects de mati√®res dans l'ordre
async function findAllSubjectSelects() {
    logAction('üîç Recherche de tous les selects de mati√®res...');
    
    // Essayer plusieurs s√©lecteurs pour trouver les selects de mati√®res
    let selects = [];
    
    // M√©thode 1: Par classe sp√©cifique
    selects = document.querySelectorAll('select.selectSubject');
    if (selects.length > 0) {
        logAction(`‚úÖ Trouv√© ${selects.length} selects via .selectSubject`);
        return Array.from(selects);
    }
    
    // M√©thode 2: Par attribut col-id
    selects = document.querySelectorAll('[col-id*="subject"] select, [col-id*="mati√®re"] select, [col-id*="matiere"] select');
    if (selects.length > 0) {
        logAction(`‚úÖ Trouv√© ${selects.length} selects via col-id`);
        return Array.from(selects);
    }
    
    // M√©thode 3: Tous les selects dans les lignes AG-Grid
    const agRows = document.querySelectorAll('.ag-row');
    if (agRows.length > 0) {
        selects = [];
        agRows.forEach(row => {
            const rowSelects = row.querySelectorAll('select');
            // Prendre le premier select de chaque ligne (suppos√© √™tre la mati√®re)
            if (rowSelects.length > 0) {
                selects.push(rowSelects[0]);
            }
        });
        
        if (selects.length > 0) {
            logAction(`‚úÖ Trouv√© ${selects.length} selects via AG-Grid`);
            return selects;
        }
    }
    
    // M√©thode 4: Tous les selects de la page
    selects = document.querySelectorAll('select');
    logAction(`‚ö†Ô∏è Fallback: utilisation de tous les selects (${selects.length})`);
    return Array.from(selects);
}

// Fonction principale de remplissage par pattern
async function executePatternFill(allSelects) {
    logAction(`üéØ D√©but du remplissage de ${allSelects.length} √©l√©ments`);
    
    let currentSubject = '';
    let processedCount = 0;
    
    for (let i = 0; i < allSelects.length; i++) {
        if (!isAutomationRunning) {
            logAction('üõë Arr√™t demand√© par l\'utilisateur');
            break;
        }
        
        const select = allSelects[i];
        const rowIndex = getRowIndex(select) || i;
        
        // V√©rifier si l'√©l√©ment est toujours dans le DOM
        if (!document.contains(select)) {
            logAction(`‚ö†Ô∏è Ligne ${rowIndex}: √âl√©ment supprim√© du DOM, passage √† la suivante`);
            continue;
        }
        
        // Obtenir la valeur actuelle
        const currentValue = select.value.trim();
        const selectedText = select.selectedOptions[0]?.textContent?.trim() || '';
        
        logAction(`üìù Ligne ${rowIndex}: Valeur actuelle = "${selectedText || currentValue}"`);
        
        // Si on trouve une nouvelle mati√®re non-vide, on la garde comme r√©f√©rence
        if (currentValue !== '' && selectedText !== '' && selectedText !== currentSubject) {
            currentSubject = selectedText;
            logImportant(`üìö Ligne ${rowIndex}: Nouvelle mati√®re d√©tect√©e: "${currentSubject}"`);
            processedCount++;
        }
        // Si la ligne est vide et qu'on a une mati√®re de r√©f√©rence, on la remplit
        else if (currentValue === '' && currentSubject !== '') {
            logAction(`üîÑ Ligne ${rowIndex}: Remplissage avec "${currentSubject}"`);
            
            try {
                // S√©lectionner la mati√®re
                await setSubjectValue(select, currentSubject);
                logImportant(`‚úÖ Ligne ${rowIndex}: "${currentSubject}" appliqu√©e`);
                processedCount++;
                
                // Attendre entre chaque action
                await delay(AUTOMATION_CONFIG.delayBetweenActions);
                
            } catch (error) {
                logAction(`‚ùå Ligne ${rowIndex}: Erreur - ${error.message}`, 'error');
            }
        }
        // Si la ligne est vide et qu'on n'a pas de mati√®re de r√©f√©rence
        else if (currentValue === '' && currentSubject === '') {
            logAction(`‚ö†Ô∏è Ligne ${rowIndex}: Vide, en attente d'une mati√®re de r√©f√©rence`);
        }
        
        // Attendre entre chaque ligne
        await delay(AUTOMATION_CONFIG.delayBetweenCycles);
    }
    
    // Arr√™ter l'automatisation
    logImportant(`‚úÖ Remplissage termin√© - ${processedCount} lignes trait√©es`, 'success');
    stopAutomation(true);
}

// Fonction pour d√©finir la valeur d'un select
async function setSubjectValue(select, subjectText) {
    // Chercher l'option correspondante
    const options = select.querySelectorAll('option');
    let targetOption = null;
    
    for (const option of options) {
        if (option.textContent.trim() === subjectText) {
            targetOption = option;
            break;
        }
    }
    
    if (!targetOption) {
        throw new Error(`Option "${subjectText}" non trouv√©e`);
    }
    
    // Cliquer sur le select pour le focaliser
    await clickElement(select);
    await delay(100);
    
    // D√©finir la valeur
    select.value = targetOption.value;
    select.selectedIndex = targetOption.index;
    
    // D√©clencher les √©v√©nements
    const inputEvent = new Event('input', { bubbles: true, cancelable: true });
    const changeEvent = new Event('change', { bubbles: true, cancelable: true });
    
    select.dispatchEvent(inputEvent);
    select.dispatchEvent(changeEvent);
    
    logAction(`  üì° √âv√©nements d√©clench√©s pour "${subjectText}"`);
}

// Exposer la fonction de test pour le remplissage automatique
window.tempoListTestPattern = function() {
    logAction('üß™ Test du remplissage automatique');
    startPatternFill({ tagName: 'SELECT' });
}; 