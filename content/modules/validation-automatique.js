// === VALIDATION AUTOMATIQUE DES LISTES ===
// Module pour valider automatiquement une liste m√®re et toutes ses listes options

// Configuration par d√©faut
let VALIDATION_AUTO_CONFIG = {
    enabled: true, // Sera charg√© depuis chrome.storage.local
    delayBetweenActions: 1000, // D√©lai entre chaque action (ms)
    validationDelay: 2000, // D√©lai apr√®s validation d'une option (2s)
    maxRetries: 3
};

// Variable pour suivre l'√©tat de l'automatisation
let isValidationRunning = false;
let currentValidationProcess = null;
let progressPanel = null;
let isMainListValidationScheduled = false; // Protection contre les validations multiples de la liste m√®re

// Cl√©s de stockage pour maintenir l'√©tat entre les pages
const STORAGE_KEYS = {
    VALIDATION_RUNNING: 'validationAutoRunning',
    CURRENT_STEP: 'validationCurrentStep', 
    OPTIONS_LIST: 'validationOptionsList',
    CURRENT_OPTION_INDEX: 'validationCurrentOptionIndex',
    LISTE_MERE_URL: 'validationListeMereUrl',
    OPTION_BEING_VALIDATED: 'validationOptionBeingValidated', // ID de l'option en cours de validation
    VALIDATED_OPTIONS: 'validationValidatedOptions' // Liste des options d√©j√† valid√©es
};

// Charger la configuration
async function loadValidationAutoConfig() {
    try {
        const result = await chrome.storage.local.get(['automaticValidationEnabled']);
        VALIDATION_AUTO_CONFIG.enabled = result.automaticValidationEnabled !== false; // true par d√©faut
        console.log('[ValidationAuto] Configuration charg√©e - enabled:', VALIDATION_AUTO_CONFIG.enabled);
    } catch (error) {
        console.log('[ValidationAuto] Erreur lors du chargement de la configuration:', error);
    }
}

// Fonctions pour g√©rer l'√©tat persistant
async function saveValidationState(state) {
    try {
        await chrome.storage.local.set(state);
        console.log('[ValidationAuto] √âtat sauvegard√©:', state);
    } catch (error) {
        console.error('[ValidationAuto] Erreur lors de la sauvegarde:', error);
    }
}

async function getValidationState() {
    try {
        const result = await chrome.storage.local.get(Object.values(STORAGE_KEYS));
        console.log('[ValidationAuto] √âtat r√©cup√©r√©:', result);
        return result;
    } catch (error) {
        console.error('[ValidationAuto] Erreur lors de la r√©cup√©ration:', error);
        return {};
    }
}

async function clearValidationState() {
    try {
        await chrome.storage.local.remove(Object.values(STORAGE_KEYS));
        console.log('[ValidationAuto] √âtat effac√©');
    } catch (error) {
        console.error('[ValidationAuto] Erreur lors de l\'effacement:', error);
    }
}

// Fonction pour v√©rifier s'il y a des options rattach√©es √† la liste m√®re
function hasAttachedOptions() {
    const optionsContainer = document.querySelector('.listeAGarder');
    const optionItems = document.querySelectorAll('li[id^="option-"]');
    
    return optionsContainer && optionItems.length > 0;
}

// Fonction pour v√©rifier l'√©tat de compl√©tion des mati√®res
async function checkSubjectCompletionStatus() {
    try {
        // V√©rifier si l'option de compl√©tion des mati√®res est activ√©e
        const result = await chrome.storage.local.get(['subjectCompletionEnabled']);
        const isCompletionEnabled = result.subjectCompletionEnabled !== false;
        
        if (!isCompletionEnabled) {
            // Si l'option n'est pas activ√©e, pas de v√©rification n√©cessaire
            console.log('[ValidationAuto] Option de compl√©tion des mati√®res d√©sactiv√©e, pas de v√©rification');
            return { enabled: false, isValid: true };
        }
        
        // Chercher l'√©tiquette de compl√©tion
        const completionBadge = document.querySelector('.tempolist-completion-badge');
        
        if (!completionBadge) {
            // Pas d'√©tiquette trouv√©e, peut-√™tre que le calcul n'est pas encore fait
            console.log('[ValidationAuto] Aucune √©tiquette de compl√©tion trouv√©e');
            return { enabled: true, isValid: true }; // On autorise par d√©faut
        }
        
        // V√©rifier la couleur de fond pour d√©terminer si c'est valide
        const backgroundColor = window.getComputedStyle(completionBadge).backgroundColor;
        
        // Convertir les couleurs RGB en format lisible
        const isGreen = backgroundColor.includes('40, 167, 69') || backgroundColor.includes('#28a745'); // Vert
        const isRed = backgroundColor.includes('220, 53, 69') || backgroundColor.includes('#dc3545'); // Rouge
        
        console.log('[ValidationAuto] Couleur de l\'√©tiquette de compl√©tion:', backgroundColor);
        console.log('[ValidationAuto] Compl√©tion valide (verte):', isGreen);
        console.log('[ValidationAuto] Compl√©tion en erreur (rouge):', isRed);
        
        return {
            enabled: true,
            isValid: isGreen || !isRed, // Valide si vert ou pas rouge
            badgeText: completionBadge.textContent.trim()
        };
        
    } catch (error) {
        console.error('[ValidationAuto] Erreur lors de la v√©rification de compl√©tion:', error);
        return { enabled: false, isValid: true }; // En cas d'erreur, autoriser par d√©faut
    }
}

// Fonction pour v√©rifier si nous sommes sur une page de liste m√®re
function isListeMerePage() {
    const url = window.location.href;
    // Pattern: https://crealiste.com/encodeur/listeFournitures/XXXXX
    if (!/\/encodeur\/listeFournitures\/\d+$/.test(url)) {
        return false;
    }
    
    // V√©rifier qu'on n'est pas sur une page d'option (code r√©f√©rence avec "-O-")
    if (isOptionPage()) {
        return false; // C'est une page d'option, pas une page m√®re
    }
    
    // V√©rifier s'il y a le conteneur de listes options sur cette page
    const listeOptionsContainer = document.querySelector('.listeOption');
    
    // Si on trouve le conteneur, c'est probablement une liste m√®re
    return !!listeOptionsContainer;
}

// Fonction pour v√©rifier si nous sommes sur une page d'option
function isOptionPage() {
    const url = window.location.href;
    if (!/\/encodeur\/listeFournitures\/\d+$/.test(url)) {
        return false;
    }
    
    // Chercher le code r√©f√©rence avec "-O-" qui indique une option
    const codeRefElements = document.querySelectorAll('.lineCodeRef');
    for (const element of codeRefElements) {
        const text = element.textContent.trim();
        if (text.includes('Code r√©f√©rence :') && text.includes('-O-')) {
            console.log('[ValidationAuto] Page d\'option d√©tect√©e via code r√©f√©rence:', text);
            return true;
        }
    }
    
    return false;
}

// Fonction pour extraire les informations des listes options
function getListesOptions() {
    const optionItems = document.querySelectorAll('li[id^="option-"]');
    const options = [];
    
    optionItems.forEach(item => {
        const optionId = item.id.replace('option-', '');
        const nameElement = item.querySelector('.nameOption');
        const viewLink = item.querySelector('.viewOption');
        
        if (nameElement && viewLink) {
            const name = nameElement.textContent.trim();
            
            options.push({
                id: optionId,
                name: name,
                needsValidation: name.includes('(A Valider)'),
                viewUrl: viewLink.href,
                element: item
            });
        }
    });
    
    return options;
}

// Fonction pour r√©cup√©rer uniquement les options qui n√©cessitent une validation
function getOptionsToValidate() {
    const allOptions = getListesOptions();
    const toValidate = allOptions.filter(option => option.needsValidation);
    
    console.log('[ValidationAuto] üìã Options trouv√©es:', allOptions.length);
    console.log('[ValidationAuto] üéØ Options √† valider:', toValidate.length);
    console.log('[ValidationAuto] üìù D√©tail des options √† valider:', toValidate.map(o => o.name));
    
    return toValidate;
}

// Fonction pour cr√©er le bouton de validation automatique
async function createValidationAutoButton() {
    console.log('[ValidationAuto] Cr√©ation du bouton de validation automatique...');
    
    // V√©rifier si la fonctionnalit√© est activ√©e
    if (!VALIDATION_AUTO_CONFIG.enabled) {
        console.log('[ValidationAuto] Fonctionnalit√© d√©sactiv√©e dans les param√®tres, pas d\'ajout de bouton');
        return;
    }
    
    // V√©rifier s'il y a des options rattach√©es √† la liste m√®re
    if (!hasAttachedOptions()) {
        console.log('[ValidationAuto] Aucune option rattach√©e trouv√©e, pas d\'ajout de bouton');
        return;
    }
    
    // V√©rifier l'√©tat de compl√©tion des mati√®res
    const completionStatus = await checkSubjectCompletionStatus();
    console.log('[ValidationAuto] √âtat de compl√©tion:', completionStatus);
    
    // Chercher le conteneur des boutons
    const btnContainer = document.querySelector('.divBtnListTeacher.divBtnListTeacher2');
    console.log('[ValidationAuto] Conteneur de boutons trouv√©:', !!btnContainer);
    
    if (!btnContainer) {
        // Essayer d'autres s√©lecteurs possibles
        const altContainer = document.querySelector('.divBtnListTeacher');
        console.log('[ValidationAuto] Conteneur alternatif trouv√©:', !!altContainer);
        
        if (!altContainer) {
            console.log('[ValidationAuto] Aucun conteneur de boutons trouv√©');
            return;
        }
    }
    
    const container = btnContainer || document.querySelector('.divBtnListTeacher');
    
    // V√©rifier si le bouton existe d√©j√†
    if (document.querySelector('#btnValidationAuto')) {
        console.log('[ValidationAuto] Le bouton existe d√©j√†');
        return;
    }
    
    // Chercher le bouton "Valider la liste"
    const btnValidation = document.querySelector('#btnValidationListe');
    console.log('[ValidationAuto] Bouton de validation trouv√©:', !!btnValidation);
    
    if (!btnValidation) {
        console.log('[ValidationAuto] Bouton de validation de la liste non trouv√©, impossible d\'ajouter le bouton automatique');
        return;
    }
    
    // Cr√©er un conteneur pour le bouton en dessous
    const bottomContainer = document.createElement('div');
    bottomContainer.style.cssText = `
        width: 100%;
        display: flex;
        justify-content: center;
        margin-top: 25px;
        padding-top: 10px;
    `;
    
    // Cr√©er le nouveau bouton avec le nouveau design
    const newButton = document.createElement('a');
    newButton.id = 'btnValidationAuto';
    newButton.className = 'text-center listBtnResponsive3 btnTeacher deleteListSimilaire';
    
    // D√©terminer si le bouton doit √™tre d√©sactiv√©
    const isDisabled = completionStatus.enabled && !completionStatus.isValid;
    
    newButton.style.cssText = `
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 80px;
        padding: 10px 30px;
        text-decoration: none;
        cursor: ${isDisabled ? 'not-allowed' : 'pointer'};
        min-width: 280px;
        opacity: ${isDisabled ? '0.5' : '1'};
        filter: ${isDisabled ? 'grayscale(1)' : 'none'};
    `;
    
    // Utiliser le SVG Bootstrap Icons cart-check
    newButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-cart-check" viewBox="0 0 16 16" style="margin-bottom: 5px;">
            <path d="M11.354 6.354a.5.5 0 0 0-.708-.708L8 8.293 6.854 7.146a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0z"/>
            <path d="M.5 1a.5.5 0 0 0 0 1h1.11l.401 1.607 1.498 7.985A.5.5 0 0 0 4 12h1a2 2 0 1 0 0 4 2 2 0 0 0 0-4h7a2 2 0 1 0 0 4 2 2 0 0 0 0-4h1a.5.5 0 0 0 .491-.408l1.5-8A.5.5 0 0 0 14.5 3H2.89l-.405-1.621A.5.5 0 0 0 2 1zm3.915 10L3.102 4h10.796l-1.313 7zM6 14a1 1 0 1 1-2 0 1 1 0 0 1 2 0m7 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0"/>
        </svg>
        <span style="font-size: 14px; line-height: 1.2;">Valider Automatiquement</span>
    `;
    
    // Ajouter l'√©v√©nement click ou un message d'erreur
    if (isDisabled) {
        newButton.title = `Validation automatique bloqu√©e : Taux de remplissage des mati√®res insuffisant (${completionStatus.badgeText || 'Erreur'})`;
        newButton.addEventListener('click', (e) => {
            e.preventDefault();
            showNotification('‚ö†Ô∏è Validation automatique bloqu√©e : Taux de remplissage des mati√®res insuffisant', 'warning');
        });
        console.log('[ValidationAuto] Bouton d√©sactiv√© √† cause de la compl√©tion insuffisante');
    } else {
        newButton.addEventListener('click', handleValidationAutoClick);
        console.log('[ValidationAuto] Bouton activ√© - compl√©tion OK ou v√©rification d√©sactiv√©e');
    }
    
    // Ajouter le bouton au conteneur inf√©rieur
    bottomContainer.appendChild(newButton);
    
    // Ins√©rer le conteneur apr√®s le conteneur principal
    container.parentNode.insertBefore(bottomContainer, container.nextSibling);
    console.log('[ValidationAuto] Bouton de validation automatique ajout√© avec succ√®s en dessous !');
}

// Fonction pour g√©rer le clic sur le bouton de validation automatique
async function handleValidationAutoClick(event) {
    event.preventDefault();
    
    console.log('[ValidationAuto] üëÜ Clic sur le bouton de validation automatique d√©tect√©');
    
    // Nettoyer d'abord tout √©tat r√©siduel pour √™tre s√ªr
    await clearValidationState();
    
    // V√©rifier s'il y a d√©j√† une automatisation en cours
    const state = await getValidationState();
    if (state[STORAGE_KEYS.VALIDATION_RUNNING]) {
        showNotification('Une validation automatique est d√©j√† en cours...', 'warning');
        return;
    }
    
    if (isValidationRunning) {
        showNotification('Une validation automatique est d√©j√† en cours...', 'warning');
        return;
    }
    
    console.log('[ValidationAuto] üöÄ D√©marrage de la validation automatique');
    isValidationRunning = true;
    await startValidationAutomatique();
}

// Fonction principale pour d√©marrer la validation automatique
async function startValidationAutomatique() {
    console.log('[ValidationAuto] üöÄ D√©marrage de la validation automatique');
    showNotification('D√©but de la validation automatique...', 'info');
    
    try {
        // R√©cup√©rer les options qui n√©cessitent une validation
        const optionsToValidate = getOptionsToValidate();
        
        if (optionsToValidate.length === 0) {
            showNotification('Aucune option "(A Valider)" trouv√©e. Validation de la liste m√®re...', 'info');
            setTimeout(() => {
                validateListeMere();
            }, 1000);
            return;
        }
        
        // Cr√©er le panneau de progression
        createProgressPanel(optionsToValidate);
        
        // Sauvegarder l'√©tat de l'automatisation
        await saveValidationState({
            [STORAGE_KEYS.VALIDATION_RUNNING]: true,
            [STORAGE_KEYS.CURRENT_STEP]: 'validating_options',
            [STORAGE_KEYS.OPTIONS_LIST]: optionsToValidate,
            [STORAGE_KEYS.CURRENT_OPTION_INDEX]: 0,
            [STORAGE_KEYS.LISTE_MERE_URL]: window.location.href,
            [STORAGE_KEYS.OPTION_BEING_VALIDATED]: null, // Reset au d√©marrage
            [STORAGE_KEYS.VALIDATED_OPTIONS]: [] // Reset de la liste des options valid√©es
        });
        
        // D√©marrer la validation de la premi√®re option
        await proceedToNextOption();
        
    } catch (error) {
        console.error('[ValidationAuto] Erreur lors de la validation automatique:', error);
        showNotification('Erreur lors de la validation automatique: ' + error.message, 'error');
        await clearValidationState();
        removeProgressPanel();
    }
}

// Fonction pour continuer vers l'option suivante
async function proceedToNextOption() {
    console.log('[ValidationAuto] üîç V√©rification des options restantes √† valider...');
    
    // V√©rifier dynamiquement les options qui restent √† valider
    const currentOptionsToValidate = getOptionsToValidate();
    
    if (currentOptionsToValidate.length === 0) {
        // Plus d'options √† valider
        console.log('[ValidationAuto] ‚úÖ Plus d\'options "(A Valider)" trouv√©es, validation de la liste m√®re');
        
        // V√©rifier si la validation de la liste m√®re n'est pas d√©j√† programm√©e
        if (isMainListValidationScheduled) {
            console.log('[ValidationAuto] ‚ö†Ô∏è Validation de la liste m√®re d√©j√† programm√©e, abandon');
            return;
        }
        
        isMainListValidationScheduled = true;
        showNotification('Toutes les options ont √©t√© valid√©es. Validation de la liste m√®re...', 'info');
        
        await saveValidationState({
            [STORAGE_KEYS.CURRENT_STEP]: 'validating_main_list',
            [STORAGE_KEYS.OPTION_BEING_VALIDATED]: null
        });
        
        setTimeout(() => {
            validateListeMere();
        }, 1000);
        return;
    }
    
    // Prendre la premi√®re option qui n√©cessite une validation
    const nextOption = currentOptionsToValidate[0];
    console.log('[ValidationAuto] üéØ Prochaine option √† valider:', nextOption.name);
    showNotification(`Validation de l'option: ${nextOption.name}`, 'info');
    
    // S'assurer que le panneau existe et mettre √† jour
    if (!progressPanel) {
        const state = await getValidationState();
        const optionsList = state[STORAGE_KEYS.OPTIONS_LIST] || [];
        if (optionsList.length > 0) {
            await createProgressPanel(optionsList);
        }
    }
    
    // Mettre √† jour le panneau de progression
    updateProgressPanel(nextOption.id, 'validating');
    
    // Sauvegarder l'option en cours de validation
    await saveValidationState({
        [STORAGE_KEYS.CURRENT_OPTION_INDEX]: nextOption.id,
        [STORAGE_KEYS.OPTION_BEING_VALIDATED]: nextOption.id
    });
    
    // Naviguer vers l'option
    console.log('[ValidationAuto] üîó Navigation vers:', nextOption.viewUrl);
    window.location.href = nextOption.viewUrl;
}

// Fonction pour obtenir l'ID de l'option actuelle depuis l'URL
function getCurrentOptionId() {
    const url = window.location.href;
    const match = url.match(/\/listeFournitures\/(\d+)$/);
    return match ? match[1] : null;
}

// Fonction pour valider l'option courante (appel√©e quand on est sur une page d'option)
async function validateCurrentOption() {
    console.log('[ValidationAuto] üîç Tentative de validation de l\'option courante');
    
    // V√©rifier qu'on est bien sur une page d'option
    if (!isOptionPage()) {
        console.log('[ValidationAuto] ‚ùå Pas sur une page d\'option, abandon');
        return false;
    }
    
    // V√©rifier qu'une automatisation est en cours
    const state = await getValidationState();
    if (!state[STORAGE_KEYS.VALIDATION_RUNNING]) {
        console.log('[ValidationAuto] ‚ùå Aucune automatisation en cours, abandon');
        return false;
    }
    
    // Obtenir l'ID de l'option actuelle
    const currentOptionId = getCurrentOptionId();
    const optionBeingValidated = state[STORAGE_KEYS.OPTION_BEING_VALIDATED];
    
    console.log('[ValidationAuto] üìç Option actuelle ID:', currentOptionId);
    console.log('[ValidationAuto] üéØ Option √† valider ID:', optionBeingValidated);
    
    // V√©rifier si c'est bien l'option qu'on doit valider
    if (!currentOptionId || currentOptionId !== optionBeingValidated) {
        console.log('[ValidationAuto] ‚ùå Cette option ne correspond pas √† celle √† valider, retour √† la liste m√®re...');
        
        // Retourner directement √† la liste m√®re
        const listeMereUrl = state[STORAGE_KEYS.LISTE_MERE_URL];
        if (listeMereUrl) {
            console.log('[ValidationAuto] üîÑ Retour √† la liste m√®re:', listeMereUrl);
            window.location.href = listeMereUrl;
        }
        return false;
    }
    
    // Chercher le bouton de validation
    const btnValidation = document.querySelector('#btnValidationListe');
    if (!btnValidation) {
        console.log('[ValidationAuto] ‚ùå Bouton de validation non trouv√©');
        return false;
    }
    
    console.log('[ValidationAuto] ‚úÖ Bouton de validation trouv√©, clic en cours...');
    console.log('[ValidationAuto] Bouton validation - texte:', btnValidation.textContent.trim());
    console.log('[ValidationAuto] Bouton validation - visible:', btnValidation.offsetParent !== null);
    
    // Marquer que cette option a √©t√© valid√©e (pour √©viter de la revalider)
    await saveValidationState({
        [STORAGE_KEYS.OPTION_BEING_VALIDATED]: 'validated_' + currentOptionId
    });
    
    // Utiliser la fonction de clic robuste
    const clickSuccess = simulateRobustClick(btnValidation);
    console.log('[ValidationAuto] R√©sultat du clic:', clickSuccess ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC');
    
    if (clickSuccess) {
        console.log('[ValidationAuto] ‚è±Ô∏è Attente de 2 secondes apr√®s validation...');
        showNotification('Option valid√©e, retour √† la liste m√®re dans 2 secondes...', 'info');
        
        // Mettre √† jour le panneau de progression
        updateProgressPanel(currentOptionId, 'completed');
        
        // Ajouter cette option √† la liste des options valid√©es
        const validatedOptions = state[STORAGE_KEYS.VALIDATED_OPTIONS] || [];
        if (!validatedOptions.includes(currentOptionId)) {
            validatedOptions.push(currentOptionId);
            await saveValidationState({
                [STORAGE_KEYS.VALIDATED_OPTIONS]: validatedOptions,
                [STORAGE_KEYS.OPTION_BEING_VALIDATED]: null // Reset apr√®s validation
            });
        }
        
        // Attendre 2 secondes puis retourner √† la liste m√®re
        setTimeout(async () => {
            const listeMereUrl = state[STORAGE_KEYS.LISTE_MERE_URL];
            console.log('[ValidationAuto] üîÑ Retour √† la liste m√®re:', listeMereUrl);
            window.location.href = listeMereUrl;
        }, 1500); // 2 secondes au lieu de 3
        
        return true;
    } else {
        // Mettre √† jour le panneau de progression avec erreur
        updateProgressPanel(currentOptionId, 'error');
    }
    
    return false;
}



// Fonction pour valider la liste m√®re
async function validateListeMere() {
    console.log('[ValidationAuto] üéØ Validation de la liste m√®re...');
    
    // Mettre √† jour le statut de la liste principale
    updateMainListProgress('validating');
    
    const btnValidation = document.querySelector('#btnValidationListe');
    console.log('[ValidationAuto] Bouton de validation de la liste m√®re trouv√©:', !!btnValidation);
    
    if (btnValidation) {
        console.log('[ValidationAuto] Clic sur le bouton de validation de la liste m√®re');
        const clickSuccess = simulateRobustClick(btnValidation);
        
        if (clickSuccess) {
            updateMainListProgress('completed');
            showNotification('üéâ Validation automatique termin√©e avec succ√®s !', 'success');
            console.log('[ValidationAuto] ‚úÖ Validation automatique termin√©e !');
        } else {
            updateMainListProgress('error');
            showNotification('Erreur lors du clic sur le bouton de validation', 'error');
            console.error('[ValidationAuto] ‚ùå √âchec du clic sur le bouton de validation');
        }
    } else {
        updateMainListProgress('error');
        console.error('[ValidationAuto] ‚ùå Bouton de validation de la liste m√®re non trouv√©');
        showNotification('Erreur: Bouton de validation de la liste m√®re non trouv√©', 'error');
    }
    
    // Nettoyer compl√®tement l'√©tat de l'automatisation
    await clearValidationState();
    isValidationRunning = false;
    isMainListValidationScheduled = false; // R√©initialiser le flag de protection
    
    // Supprimer le panneau de progression
    setTimeout(() => {
        removeProgressPanel();
    }, 2000); // Laisser 2 secondes pour voir le succ√®s
    
    console.log('[ValidationAuto] üßπ √âtat de l\'automatisation compl√®tement nettoy√©');
}

// Fonction utilitaire pour attendre
function wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Fonction pour simuler un clic simple (un seul clic, pas de spam)
function simulateRobustClick(element) {
    console.log('[ValidationAuto] üéØ Clic simple sur:', element);
    
    try {
        // Focus optionnel pour s'assurer que l'√©l√©ment est pr√™t
        if (element.focus) {
            element.focus();
            console.log('[ValidationAuto] ‚úÖ Focus appliqu√©');
        }
        
        // UN SEUL clic simple - pas de multiple events
        element.click();
        console.log('[ValidationAuto] ‚úÖ Click() unique ex√©cut√©');
        
        return true;
        
    } catch (error) {
        console.error('[ValidationAuto] ‚ùå Erreur lors du clic:', error);
        return false;
    }
}

// Fonction pour cr√©er l'encart de progression de fa√ßon persistante
async function createProgressPanel(optionsToValidate) {
    // Supprimer l'ancien panneau s'il existe
    removeProgressPanel();
    
    progressPanel = document.createElement('div');
    progressPanel.id = 'validationProgressPanel';
    progressPanel.style.cssText = `
        position: fixed;
        top: 20px;
        left: 20px;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 20px;
        border-radius: 10px;
        font-family: Arial, sans-serif;
        z-index: 10001;
        min-width: 450px;
        max-width: 500px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    `;
    
    const title = document.createElement('div');
    title.style.cssText = `
        font-size: 16px;
        font-weight: bold;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    `;
    title.innerHTML = `
        <span>üîÑ Validation automatique</span>
        <span style="font-size: 12px; opacity: 0.7;">√âchap pour arr√™ter</span>
    `;
    
    const optionsList = document.createElement('div');
    optionsList.id = 'validationOptionsList';
    
    // Ajouter la liste principale en premier
    const mainListItem = document.createElement('div');
    mainListItem.id = 'progress-main-list';
    mainListItem.style.cssText = `
        display: flex;
        align-items: center;
        padding: 8px 0;
        border-bottom: 2px solid rgba(255, 255, 255, 0.4);
        margin-bottom: 10px;
        font-weight: bold;
    `;
    
    mainListItem.innerHTML = `
        <span id="check-main-list" style="margin-right: 10px; font-size: 16px;">‚è≥</span>
        <span style="flex-grow: 1; font-size: 14px;">Liste principale</span>
    `;
    
    optionsList.appendChild(mainListItem);
    
    // R√©cup√©rer la liste des options d√©j√† valid√©es
    const state = await getValidationState();
    const validatedOptions = state[STORAGE_KEYS.VALIDATED_OPTIONS] || [];
    const currentOptionBeingValidated = state[STORAGE_KEYS.OPTION_BEING_VALIDATED];
    
    // Cr√©er la liste des options
    optionsToValidate.forEach((option, index) => {
        const optionItem = document.createElement('div');
        optionItem.id = `progress-option-${option.id}`;
        optionItem.style.cssText = `
            display: flex;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            margin-left: 20px;
        `;
        
        // D√©terminer l'√©tat initial de l'option
        let initialStatus = '‚è≥';
        if (validatedOptions.includes(option.id)) {
            initialStatus = '‚úÖ';
        } else if (currentOptionBeingValidated === option.id) {
            initialStatus = 'üîÑ';
        }
        
        optionItem.innerHTML = `
            <span id="check-${option.id}" style="margin-right: 10px; font-size: 16px;">${initialStatus}</span>
            <span style="flex-grow: 1; font-size: 14px;">${option.name}</span>
        `;
        
        optionsList.appendChild(optionItem);
    });
    
    progressPanel.appendChild(title);
    progressPanel.appendChild(optionsList);
    document.body.appendChild(progressPanel);
    
    console.log('[ValidationAuto] Panneau de progression cr√©√© avec', optionsToValidate.length, 'options');
    console.log('[ValidationAuto] Options d√©j√† valid√©es:', validatedOptions);
}

// Fonction pour mettre √† jour le statut d'une option dans le panneau
function updateProgressPanel(optionId, status) {
    if (!progressPanel) return;
    
    const checkElement = document.getElementById(`check-${optionId}`);
    if (checkElement) {
        switch (status) {
            case 'validating':
                checkElement.textContent = 'üîÑ';
                checkElement.style.color = '#2196F3';
                break;
            case 'completed':
                checkElement.textContent = '‚úÖ';
                checkElement.style.color = '#4CAF50';
                break;
            case 'error':
                checkElement.textContent = '‚ùå';
                checkElement.style.color = '#F44336';
                break;
        }
    }
}

// Fonction pour mettre √† jour le statut de la liste principale
function updateMainListProgress(status) {
    if (!progressPanel) return;
    
    const checkElement = document.getElementById('check-main-list');
    if (checkElement) {
        switch (status) {
            case 'validating':
                checkElement.textContent = 'üîÑ';
                checkElement.style.color = '#2196F3';
                break;
            case 'completed':
                checkElement.textContent = '‚úÖ';
                checkElement.style.color = '#4CAF50';
                break;
            case 'error':
                checkElement.textContent = '‚ùå';
                checkElement.style.color = '#F44336';
                break;
        }
    }
}

// Fonction pour supprimer l'encart de progression
function removeProgressPanel() {
    if (progressPanel && progressPanel.parentNode) {
        progressPanel.parentNode.removeChild(progressPanel);
        progressPanel = null;
        console.log('[ValidationAuto] Panneau de progression supprim√©');
    }
}

// Fonction pour g√©rer la touche √âchap (sp√©cifique √† la validation automatique)
async function handleValidationEscapeKey(event) {
    if (event.key === 'Escape' || event.keyCode === 27) { // Support macOS et Windows
        try {
            const state = await getValidationState();
            // V√©rifier si une validation est en cours
            if (isValidationRunning || (state && state[STORAGE_KEYS.VALIDATION_RUNNING])) {
                console.log('[ValidationAuto] üõë Arr√™t de la validation automatique demand√© par l\'utilisateur (√âchap)');
                await stopValidationAutomatique();
                event.preventDefault();
                event.stopPropagation();
            }
        } catch (error) {
            console.error('[ValidationAuto] Erreur lors de la gestion de la touche √âchap:', error);
        }
    }
}

// Fonction pour arr√™ter la validation automatique
async function stopValidationAutomatique() {
    console.log('[ValidationAuto] üõë Arr√™t de la validation automatique...');
    
    // Nettoyer l'√©tat
    await clearValidationState();
    isValidationRunning = false;
    isMainListValidationScheduled = false; // R√©initialiser le flag de protection
    
    // Supprimer le panneau de progression
    removeProgressPanel();
    
    // Afficher une notification
    showNotification('üõë Validation automatique arr√™t√©e par l\'utilisateur', 'warning');
    
    console.log('[ValidationAuto] ‚úÖ Validation automatique arr√™t√©e');
}

// Fonction pour afficher des notifications
function showNotification(message, type = 'info') {
    // Cr√©er une notification simple
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px;
        border-radius: 5px;
        color: white;
        font-weight: bold;
        z-index: 10000;
        max-width: 300px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    `;
    
    // Couleurs selon le type
    switch (type) {
        case 'success':
            notification.style.backgroundColor = '#4CAF50';
            break;
        case 'warning':
            notification.style.backgroundColor = '#FF9800';
            break;
        case 'error':
            notification.style.backgroundColor = '#F44336';
            break;
        default:
            notification.style.backgroundColor = '#2196F3';
    }
    
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // Supprimer apr√®s 4 secondes
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 4000);
    
    console.log(`[ValidationAuto] ${type.toUpperCase()}: ${message}`);
}

// Fonction pour v√©rifier si l'automatisation en cours est valide
async function isAutomationValid() {
    const state = await getValidationState();
    const isRunning = state[STORAGE_KEYS.VALIDATION_RUNNING];
    
    if (!isRunning) {
        return false;
    }
    
    // V√©rifier si l'URL de la liste m√®re correspond √† la page actuelle
    const listeMereUrl = state[STORAGE_KEYS.LISTE_MERE_URL];
    const currentStep = state[STORAGE_KEYS.CURRENT_STEP];
    
    // Si on est sur une liste m√®re diff√©rente de celle sauvegard√©e, l'automatisation n'est plus valide
    if (isListeMerePage() && listeMereUrl && !window.location.href.includes(listeMereUrl)) {
        console.log('[ValidationAuto] ‚ùå Automatisation obsol√®te d√©tect√©e (liste m√®re diff√©rente)');
        await clearValidationState();
        return false;
    }
    
    return true;
}

// Fonction pour continuer l'automatisation si elle est en cours
async function continueAutomationIfRunning() {
    const isValid = await isAutomationValid();
    
    if (!isValid) {
        console.log('[ValidationAuto] üîç Aucune automatisation valide en cours');
        return false;
    }
    
    const state = await getValidationState();
    console.log('[ValidationAuto] üîÑ Automatisation valide d√©tect√©e, continuit√©...');
    const currentStep = state[STORAGE_KEYS.CURRENT_STEP];
    
    // Recr√©er le panneau de progression si n√©cessaire
    if (currentStep === 'validating_options' && !progressPanel) {
        const optionsList = state[STORAGE_KEYS.OPTIONS_LIST] || [];
        if (optionsList.length > 0) {
            await createProgressPanel(optionsList);
        }
    } else if (currentStep === 'validating_main_list' && !progressPanel) {
        // Aussi recr√©er le panneau lors de la validation de la liste principale
        const optionsList = state[STORAGE_KEYS.OPTIONS_LIST] || [];
        if (optionsList.length > 0) {
            await createProgressPanel(optionsList);
            updateMainListProgress('validating');
        }
    }
    
    if (currentStep === 'validating_options') {
        if (isOptionPage()) {
            // V√©rifier si cette option a d√©j√† √©t√© valid√©e
            const currentOptionId = getCurrentOptionId();
            const optionBeingValidated = state[STORAGE_KEYS.OPTION_BEING_VALIDATED];
            
            console.log('[ValidationAuto] üìç Sur une page d\'option');
            console.log('[ValidationAuto] üîç Option actuelle:', currentOptionId);
            console.log('[ValidationAuto] üéØ Option en cours:', optionBeingValidated);
            
            // Si l'option a d√©j√† √©t√© valid√©e (prefixe "validated_"), retourner √† la liste m√®re
            if (optionBeingValidated && optionBeingValidated.startsWith('validated_')) {
                const validatedOptionId = optionBeingValidated.replace('validated_', '');
                if (currentOptionId === validatedOptionId) {
                    console.log('[ValidationAuto] ‚úÖ Option d√©j√† valid√©e, retour direct √† la liste m√®re...');
                    const listeMereUrl = state[STORAGE_KEYS.LISTE_MERE_URL];
                    if (listeMereUrl) {
                        setTimeout(() => {
                            window.location.href = listeMereUrl;
                        }, 1000);
                    }
                    return true;
                }
            }
            
            // Sinon, valider l'option
            console.log('[ValidationAuto] üîß Validation de l\'option...');
            setTimeout(() => {
                validateCurrentOption();
            }, 2000); // Attendre que la page soit compl√®tement charg√©e
            return true;
        } else if (isListeMerePage()) {
            // On est sur la liste m√®re, continuer vers l'option suivante
            console.log('[ValidationAuto] üìç Sur la liste m√®re, passage √† l\'option suivante...');
            setTimeout(() => {
                proceedToNextOption();
            }, 1500);
            return true;
        }
    } else if (currentStep === 'validating_main_list') {
        if (isListeMerePage()) {
            // On est sur la liste m√®re, la valider
            console.log('[ValidationAuto] üìç Sur la liste m√®re, validation finale...');
            
            // V√©rifier si la validation de la liste m√®re n'est pas d√©j√† programm√©e
            if (isMainListValidationScheduled) {
                console.log('[ValidationAuto] ‚ö†Ô∏è Validation de la liste m√®re d√©j√† programm√©e, abandon');
                return true;
            }
            
            isMainListValidationScheduled = true;
            setTimeout(() => {
                validateListeMere();
            }, 2000);
            return true;
        }
    }
    
    return false;
}

// Fonction pour nettoyer l'√©tat si on arrive sur une nouvelle liste m√®re
async function cleanStateIfNewListeMere() {
    const state = await getValidationState();
    const savedListeMereUrl = state[STORAGE_KEYS.LISTE_MERE_URL];
    const currentUrl = window.location.href;
    
    // Si on est sur une liste m√®re et qu'elle est diff√©rente de celle sauvegard√©e
    if (isListeMerePage() && savedListeMereUrl && savedListeMereUrl !== currentUrl) {
        console.log('[ValidationAuto] üßπ Nouvelle liste m√®re d√©tect√©e, nettoyage de l\'ancien √©tat');
        console.log('[ValidationAuto] Ancienne URL:', savedListeMereUrl);
        console.log('[ValidationAuto] Nouvelle URL:', currentUrl);
        await clearValidationState();
        isMainListValidationScheduled = false; // R√©initialiser le flag pour la nouvelle liste m√®re
    }
}

// Fonction d'initialisation du module
async function initValidationAuto() {
    console.log('[ValidationAuto] üöÄ Initialisation du module...');
    console.log('[ValidationAuto] URL actuelle:', window.location.href);
    
    // Charger la configuration
    await loadValidationAutoConfig();
    
    // Nettoyer l'√©tat si on arrive sur une nouvelle liste m√®re
    await cleanStateIfNewListeMere();
    
    // V√©rifier imm√©diatement si une automatisation est en cours pour recr√©er le panneau rapidement
    const state = await getValidationState();
    if (state[STORAGE_KEYS.VALIDATION_RUNNING]) {
        console.log('[ValidationAuto] ‚ö° Automatisation en cours d√©tect√©e, cr√©ation imm√©diate du panneau');
        const optionsList = state[STORAGE_KEYS.OPTIONS_LIST] || [];
        if (optionsList.length > 0) {
            await createProgressPanel(optionsList);
        }
    }
    
    // D'abord, ajouter le bouton si nous sommes sur une page de liste m√®re
    const isListeMere = isListeMerePage();
    console.log('[ValidationAuto] Page de liste m√®re d√©tect√©e:', isListeMere);
    
    if (isListeMere) {
        console.log('[ValidationAuto] Tentative d\'ajout du bouton...');
        // Attendre un peu que la page soit compl√®tement charg√©e
        setTimeout(async () => {
            await createValidationAutoButton();
        }, 1000);
        
        // Essayer plusieurs fois si le bouton n'appara√Æt pas
        let retryCount = 0;
        const maxRetries = 5;
        const retryInterval = setInterval(async () => {
            if (document.querySelector('#btnValidationAuto') || retryCount >= maxRetries) {
                clearInterval(retryInterval);
                if (retryCount >= maxRetries) {
                    console.log('[ValidationAuto] √âchec apr√®s', maxRetries, 'tentatives');
                }
                return;
            }
            retryCount++;
            console.log('[ValidationAuto] Nouvelle tentative d\'ajout du bouton (', retryCount, '/', maxRetries, ')');
            await createValidationAutoButton();
        }, 2000);
    }
    
    // ENSUITE seulement, v√©rifier si une automatisation √©tait en cours (apr√®s nettoyage)
    setTimeout(async () => {
        const automationContinued = await continueAutomationIfRunning();
        if (automationContinued) {
            console.log('[ValidationAuto] üîÑ Automatisation en cours d√©tect√©e et reprise');
        } else {
            console.log('[ValidationAuto] ‚úÖ Aucune automatisation en cours, pr√™t pour utilisation manuelle');
        }
    }, 1500); // R√©duire le d√©lai √† 1.5 secondes
}

// Observer les changements de page pour r√©initialiser le module si n√©cessaire
let lastUrlValidation = location.href;
new MutationObserver(() => {
    const currentUrl = location.href;
    if (currentUrl !== lastUrlValidation) {
        lastUrlValidation = currentUrl;
        console.log('[ValidationAuto] üîÑ Changement de page d√©tect√©:', currentUrl);
        
        // Recr√©er imm√©diatement le panneau s'il y a une automatisation en cours
        setTimeout(async () => {
            const state = await getValidationState();
            if (state[STORAGE_KEYS.VALIDATION_RUNNING] && !progressPanel) {
                console.log('[ValidationAuto] ‚ö° Recr√©ation imm√©diate du panneau apr√®s changement de page');
                const optionsList = state[STORAGE_KEYS.OPTIONS_LIST] || [];
                if (optionsList.length > 0) {
                    await createProgressPanel(optionsList);
                }
            }
        }, 25); // Tr√®s rapide pour √©viter le d√©lai visible
        
        // Nouvelle page d√©tect√©e, nettoyer d'abord puis v√©rifier automatisation
        setTimeout(async () => {
            // Nettoyer l'√©tat si on arrive sur une nouvelle liste m√®re
            await cleanStateIfNewListeMere();
            
            // V√©rifier si une automatisation est en cours
            const automationContinued = await continueAutomationIfRunning();
            
            // Ajouter le bouton si on est sur une liste m√®re ET qu'aucune automatisation n'est en cours
            if (!automationContinued && isListeMerePage() && !document.querySelector('#btnValidationAuto')) {
                await createValidationAutoButton();
            }
        }, 1500);
    }
}).observe(document, { subtree: true, childList: true });

// Ajouter l'√©coute de la touche √âchap pour la validation automatique
document.addEventListener('keydown', handleValidationEscapeKey);

// √âcouter les messages pour activer/d√©sactiver la fonctionnalit√©
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.action === 'updateAutomaticValidation') {
        VALIDATION_AUTO_CONFIG = { ...VALIDATION_AUTO_CONFIG, ...request.config };
        console.log('[ValidationAuto] Configuration mise √† jour:', VALIDATION_AUTO_CONFIG);
        
        if (VALIDATION_AUTO_CONFIG.enabled) {
            // Relancer l'initialisation si on est sur une page de liste m√®re
            if (isListeMerePage() && !document.querySelector('#btnValidationAuto')) {
                createValidationAutoButton().catch(error => {
                    console.error('[ValidationAuto] Erreur lors de la cr√©ation du bouton:', error);
                });
            }
        } else {
            // Supprimer le bouton s'il existe
            const existingButton = document.querySelector('#btnValidationAuto');
            if (existingButton) {
                existingButton.parentNode.remove(); // Supprimer le conteneur entier
                console.log('[ValidationAuto] Bouton supprim√© car fonctionnalit√© d√©sactiv√©e');
            }
        }
        
        sendResponse({ success: true });
    }
});

// Initialiser le module quand le DOM est pr√™t
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        initValidationAuto();
    });
} else {
    initValidationAuto();
}

// Aussi initialiser apr√®s que tout soit charg√©
window.addEventListener('load', () => {
    // Recr√©er imm√©diatement le panneau si n√©cessaire
    setTimeout(async () => {
        const state = await getValidationState();
        if (state[STORAGE_KEYS.VALIDATION_RUNNING] && !progressPanel) {
            console.log('[ValidationAuto] ‚ö° Recr√©ation du panneau apr√®s load complet');
            const optionsList = state[STORAGE_KEYS.OPTIONS_LIST] || [];
            if (optionsList.length > 0) {
                await createProgressPanel(optionsList);
            }
        }
    }, 50);
    
    setTimeout(async () => {
        console.log('[ValidationAuto] üîÑ Initialisation apr√®s chargement complet de la page');
        
        // Nettoyer l'√©tat si on arrive sur une nouvelle liste m√®re
        await cleanStateIfNewListeMere();
        
        // V√©rifier si une automatisation est en cours
        const automationContinued = await continueAutomationIfRunning();
        
        // Ajouter le bouton si n√©cessaire et si aucune automatisation n'est en cours
        if (!automationContinued && isListeMerePage() && !document.querySelector('#btnValidationAuto')) {
            await createValidationAutoButton();
        }
    }, 2000);
});

// Fonction de d√©bogage pour analyser la page
function debugPageStructure() {
    console.log('[ValidationAuto] === ANALYSE DE LA PAGE ===');
    console.log('[ValidationAuto] URL:', window.location.href);
    console.log('[ValidationAuto] Pattern URL match:', /\/encodeur\/listeFournitures\/\d+$/.test(window.location.href));
    
    // V√©rifier les codes r√©f√©rences
    const codeRefElements = document.querySelectorAll('.lineCodeRef');
    console.log('[ValidationAuto] √âl√©ments code r√©f√©rence trouv√©s:', codeRefElements.length);
    codeRefElements.forEach((element, index) => {
        const text = element.textContent.trim();
        console.log('[ValidationAuto] Code ref', index + 1, ':', text);
        if (text.includes('Code r√©f√©rence :')) {
            console.log('[ValidationAuto] -> Contient "-O-":', text.includes('-O-'));
        }
    });
    
    console.log('[ValidationAuto] Est une page d\'option:', isOptionPage());
    console.log('[ValidationAuto] Est une page de liste m√®re:', isListeMerePage());
    
    const listeOptionsContainer = document.querySelector('.listeOption');
    console.log('[ValidationAuto] Container .listeOption:', !!listeOptionsContainer);
    
    const btnContainer1 = document.querySelector('.divBtnListTeacher.divBtnListTeacher2');
    console.log('[ValidationAuto] Container boutons (.divBtnListTeacher.divBtnListTeacher2):', !!btnContainer1);
    
    const btnContainer2 = document.querySelector('.divBtnListTeacher');
    console.log('[ValidationAuto] Container boutons alternatif (.divBtnListTeacher):', !!btnContainer2);
    
    const btnValidation = document.querySelector('#btnValidationListe');
    console.log('[ValidationAuto] Bouton validation (#btnValidationListe):', !!btnValidation);
    
    const optionItems = document.querySelectorAll('li[id^="option-"]');
    console.log('[ValidationAuto] Options trouv√©es:', optionItems.length);
    
    if (isListeMerePage()) {
        const allOptions = getListesOptions();
        const optionsToValidate = getOptionsToValidate();
        console.log('[ValidationAuto] Options d√©taill√©es:', allOptions);
        console.log('[ValidationAuto] Options √† valider:', optionsToValidate);
    }
    
    console.log('[ValidationAuto] === FIN ANALYSE ===');
}

console.log('[ValidationAuto] Module de validation automatique charg√©');

// Fonction de d√©bogage accessible depuis la console
window.debugValidationAuto = debugPageStructure; 